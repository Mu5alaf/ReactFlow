{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BEVATEL\\\\Desktop\\\\ReactFlow\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//useCallback for memorize\n//useState for manage state in functional components\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge,\n//for adding edge between nodes\nMiniMap,\n//for adding the features of background and controls style\nControls, Background, applyNodeChanges,\n//for apply change of nodes and edges\napplyEdgeChanges } from 'react-flow-renderer'; // importing reactflow component to manage the dgram\nimport './App.css'; // app css sheet\n//then calling the node from component file\nimport Sidebar from './components/Sidebar';\nimport { ScrapperNode } from './components/ScrapperNode';\nimport { SummaryNode } from './components/SummaryNode';\nimport { ScraperProvider } from './components/ScraperContext';\n\n// here we will have 2 node one for url and other for summary output\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  webscrapper: ScrapperNode,\n  summary: SummaryNode\n};\n\n// store each nodes of the flow diagram\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  //handling add an edg between nodes when we connect 2 node together\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  //allow drag over flow diagram\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  // handling when we dropped into flow diagram\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowInstance.getViewport();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.x,\n      //position of event node\n      y: event.clientY - reactFlowBounds.y\n    });\n    const newNode = {\n      id: `${type}_${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  },\n  //insert data insied node \n  [reactFlowInstance]);\n  return /*#__PURE__*/_jsxDEV(ScraperProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: '100vh',\n              width: '100%',\n              backgroundColor: '#F4EAE0'\n            },\n            children: /*#__PURE__*/_jsxDEV(ReactFlow\n            //pass edges and nodes to diagram\n            , {\n              nodes: nodes,\n              edges: edges\n              //update nodes and edges based on changes that i make\n              ,\n              onNodesChange: changes => setNodes(nds => applyNodeChanges(changes, nds)),\n              onEdgesChange: changes => setEdges(eds => applyEdgeChanges(changes, eds))\n              //handel drag and drop over events\n              ,\n              onConnect: onConnect,\n              onInit: setReactFlowInstance,\n              onDrop: onDrop,\n              onDragOver: onDragOver,\n              nodeTypes: nodeTypes,\n              fitView: true,\n              children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Background, {\n                variant: \"lines\",\n                gap: 20,\n                size: 2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uwb4BCmVESmMUvlLxVMTXZZlcxE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","applyNodeChanges","applyEdgeChanges","Sidebar","ScrapperNode","SummaryNode","ScraperProvider","jsxDEV","_jsxDEV","nodeTypes","webscrapper","summary","App","_s","nodes","setNodes","edges","setEdges","reactFlowInstance","setReactFlowInstance","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","getViewport","type","getData","position","project","x","clientX","y","clientY","newNode","id","Date","now","data","label","nds","concat","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","backgroundColor","onNodesChange","changes","onEdgesChange","onInit","fitView","variant","gap","size","_c","$RefreshReg$"],"sources":["C:/Users/BEVATEL/Desktop/ReactFlow/frontend/src/App.js"],"sourcesContent":["//useCallback for memorize\n//useState for manage state in functional components\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider, \n  addEdge,//for adding edge between nodes\n  MiniMap,//for adding the features of background and controls style\n  Controls,\n  Background,\n  applyNodeChanges,//for apply change of nodes and edges\n  applyEdgeChanges,\n} from 'react-flow-renderer';// importing reactflow component to manage the dgram\nimport './App.css'; // app css sheet\n//then calling the node from component file\nimport Sidebar from './components/Sidebar';\nimport { ScrapperNode } from './components/ScrapperNode';\nimport { SummaryNode } from './components/SummaryNode';\nimport { ScraperProvider } from './components/ScraperContext';\n\n// here we will have 2 node one for url and other for summary output\nconst nodeTypes = {\n  webscrapper: ScrapperNode,\n  summary: SummaryNode,\n};\n\n// store each nodes of the flow diagram\nconst App = () => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n//handling add an edg between nodes when we connect 2 node together\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    []\n  );\n  \n//allow drag over flow diagram\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n// handling when we dropped into flow diagram\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const reactFlowBounds = reactFlowInstance.getViewport();\n      const type = event.dataTransfer.getData('application/reactflow');\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.x,//position of event node\n        y: event.clientY - reactFlowBounds.y,\n      });\n      const newNode = {\n        id: `${type}_${Date.now()}`,\n        type,\n        position,\n        data: { label: `${type} node` },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    //insert data insied node \n    [reactFlowInstance]\n  );\n\n  return (\n    <ScraperProvider>\n      <div className=\"app\">\n        <Sidebar />\n        <div className=\"reactflow-wrapper\">\n          <ReactFlowProvider>\n            <div style={{ height: '100vh', width: '100%', backgroundColor: '#F4EAE0' }}>\n            <ReactFlow\n              //pass edges and nodes to diagram\n              nodes={nodes}\n              edges={edges}\n              //update nodes and edges based on changes that i make\n              onNodesChange={(changes) => setNodes((nds) => applyNodeChanges(changes, nds))}\n              onEdgesChange={(changes) => setEdges((eds) => applyEdgeChanges(changes, eds))}\n              //handel drag and drop over events\n              onConnect={onConnect}\n              onInit={setReactFlowInstance}\n              onDrop={onDrop}\n              onDragOver={onDragOver}\n              nodeTypes={nodeTypes}\n              fitView\n            >\n              <MiniMap />\n              <Controls />\n              <Background variant=\"lines\" gap={20} size={2} />\n            </ReactFlow>\n            </div>\n          </ReactFlowProvider>\n        </div>\n      </div>\n    </ScraperProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}