{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BEVATEL\\\\desktop\\\\ReactFlow\\\\frontend\\\\src\\\\components\\\\ScraperContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//creating scraper context to shear data between components\nimport React, { createContext, useState, useContext } from 'react';\n\n//create new context object share data globally within a component tree without having to pass props manually at each level. \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScraperContext = /*#__PURE__*/createContext();\n//Provides context values to its children.\nexport const ScraperProvider = ({\n  children\n}) => {\n  _s();\n  //to pass the context value to children\n  const [scrapedContent, setScrapedContent] = useState('');\n  return /*#__PURE__*/_jsxDEV(ScraperContext.Provider, {\n    value: {\n      scrapedContent,\n      setScrapedContent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n//access to ScraperContext\n_s(ScraperProvider, \"v7eQfghkOM6XNomy7976RK6oaro=\");\n_c = ScraperProvider;\nexport const useScraper = () => {\n  _s2();\n  return useContext(ScraperContext);\n};\n_s2(useScraper, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ScraperProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ScraperContext","ScraperProvider","children","_s","scrapedContent","setScrapedContent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useScraper","_s2","$RefreshReg$"],"sources":["C:/Users/BEVATEL/desktop/ReactFlow/frontend/src/components/ScraperContext.js"],"sourcesContent":["//creating scraper context to shear data between components\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n//create new context object share data globally within a component tree without having to pass props manually at each level. \r\nconst ScraperContext = createContext();\r\n//Provides context values to its children.\r\nexport const ScraperProvider = ({ children }) => {\r\n  //to pass the context value to children\r\n  const [scrapedContent, setScrapedContent] = useState('');\r\n\r\n  return (\r\n    <ScraperContext.Provider value={{ scrapedContent, setScrapedContent }}>\r\n      {children}\r\n    </ScraperContext.Provider>\r\n  );\r\n};\r\n//access to ScraperContext\r\nexport const useScraper = () => useContext(ScraperContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;AACtC;AACA,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExD,oBACEG,OAAA,CAACC,cAAc,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,cAAc;MAAEC;IAAkB,CAAE;IAAAH,QAAA,EACnEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AACD;AAAAR,EAAA,CAVaF,eAAe;AAAAW,EAAA,GAAfX,eAAe;AAW5B,OAAO,MAAMY,UAAU,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjB,UAAU,CAACG,cAAc,CAAC;AAAA;AAACc,GAAA,CAA9CD,UAAU;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}