{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BEVATEL\\\\Desktop\\\\ReactFlow\\\\frontend\\\\src\\\\components\\\\SummaryNode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Handle, Position } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { useScraper } from './ScraperContext';\n//Ui component node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SummaryNode = () => {\n  _s();\n  const {\n    scrapedContent\n  } = useScraper(); // Use context to get the scraped content\n  const [summary, setSummary] = useState('');\n  //useCallback make recall when summary content change upon user change url and get ne content\n  const generateSummary = useCallback(async () => {\n    if (!scrapedContent) return; // If there's no content, don't attempt to generate a summary\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/summary/', {\n        data: scrapedContent\n      });\n      setSummary(response.data.scrapedContent);\n      console.log(setSummary);\n    } catch (error) {\n      console.error('Error generating summary', error);\n    }\n  }, [scrapedContent]);\n  useEffect(() => {\n    //debug line\n    console.log('SummaryNode - Scraped Content:', scrapedContent);\n    //check if theres content to display in node summary\n    if (scrapedContent) {\n      generateSummary();\n    }\n  }, [scrapedContent, generateSummary]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node summary\",\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: Position.Left\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-card\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../image/profile.png'),\n          alt: \"Logo\",\n          width: \"30\",\n          height: \"30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), \"Summary\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"card-text\",\n      children: summary || (scrapedContent ? 'Generating summary...' : 'Waiting for scraped content...')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SummaryNode, \"VUm5e6Tifl/t8Oqo+S5EpWueNj4=\", false, function () {\n  return [useScraper];\n});\n_c = SummaryNode;\nvar _c;\n$RefreshReg$(_c, \"SummaryNode\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Handle","Position","axios","useScraper","jsxDEV","_jsxDEV","SummaryNode","_s","scrapedContent","summary","setSummary","generateSummary","response","post","data","console","log","error","className","children","type","position","Left","fileName","_jsxFileName","lineNumber","columnNumber","src","require","alt","width","height","_c","$RefreshReg$"],"sources":["C:/Users/BEVATEL/Desktop/ReactFlow/frontend/src/components/SummaryNode.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\nimport { useScraper } from './ScraperContext';\r\n//Ui component node\r\nexport const SummaryNode = () => {\r\n  const { scrapedContent } = useScraper(); // Use context to get the scraped content\r\n  const [summary, setSummary] = useState('');\r\n//useCallback make recall when summary content change upon user change url and get ne content\r\n  const generateSummary = useCallback(async () => {\r\n    if (!scrapedContent) return; // If there's no content, don't attempt to generate a summary\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/api/summary/', { data: scrapedContent });\r\n      setSummary(response.data.scrapedContent);\r\n      console.log(setSummary)\r\n    } catch (error) {\r\n      console.error('Error generating summary', error);\r\n    }\r\n  }, [scrapedContent]);\r\n\r\n  useEffect(() => {\r\n    //debug line\r\n    console.log('SummaryNode - Scraped Content:', scrapedContent);\r\n    //check if theres content to display in node summary\r\n    if (scrapedContent) {\r\n      generateSummary();\r\n    }\r\n  }, [scrapedContent, generateSummary]);\r\n\r\n  return (\r\n    <div className=\"node summary\">\r\n      <Handle type=\"target\" position={Position.Left} />\r\n      <div className=\"title-card\">\r\n        <h5 className=\"card-title\">\r\n          <img src={require('../image/profile.png')} alt=\"Logo\" width=\"30\" height=\"30\" />\r\n          Summary\r\n        </h5>\r\n      </div>\r\n      <p className=\"card-text\">\r\n        {/* check if summary is start to generated */}\r\n        {summary || (scrapedContent ? 'Generating summary...' : 'Waiting for scraped content...')}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,MAAM,EAAEC,QAAQ,QAAQ,qBAAqB;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAe,CAAC,GAAGL,UAAU,CAAC,CAAC,CAAC,CAAC;EACzC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACE,MAAMc,eAAe,GAAGZ,WAAW,CAAC,YAAY;IAC9C,IAAI,CAACS,cAAc,EAAE,OAAO,CAAC;IAC7B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,oCAAoC,EAAE;QAAEC,IAAI,EAAEN;MAAe,CAAC,CAAC;MACjGE,UAAU,CAACE,QAAQ,CAACE,IAAI,CAACN,cAAc,CAAC;MACxCO,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;IACzB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC,EAAE,CAACT,cAAc,CAAC,CAAC;EAEpBV,SAAS,CAAC,MAAM;IACd;IACAiB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAER,cAAc,CAAC;IAC7D;IACA,IAAIA,cAAc,EAAE;MAClBG,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,cAAc,EAAEG,eAAe,CAAC,CAAC;EAErC,oBACEN,OAAA;IAAKa,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3Bd,OAAA,CAACL,MAAM;MAACoB,IAAI,EAAC,QAAQ;MAACC,QAAQ,EAAEpB,QAAQ,CAACqB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjDrB,OAAA;MAAKa,SAAS,EAAC,YAAY;MAAAC,QAAA,eACzBd,OAAA;QAAIa,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACxBd,OAAA;UAAKsB,GAAG,EAAEC,OAAO,CAAC,sBAAsB,CAAE;UAACC,GAAG,EAAC,MAAM;UAACC,KAAK,EAAC,IAAI;UAACC,MAAM,EAAC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,WAEjF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNrB,OAAA;MAAGa,SAAS,EAAC,WAAW;MAAAC,QAAA,EAErBV,OAAO,KAAKD,cAAc,GAAG,uBAAuB,GAAG,gCAAgC;IAAC;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACnB,EAAA,CAvCWD,WAAW;EAAA,QACKH,UAAU;AAAA;AAAA6B,EAAA,GAD1B1B,WAAW;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}